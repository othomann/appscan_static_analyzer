{
    "id": "ibm.devops.services.pipeline.appscan.static.builder.newappscan",
    "version": 1,
    "name_key": "ExtName",
    "desc_key": "ExtDesc",
    "extension_type": "Test",
    "message_key": "ExtMessage",
    "inputs": [
        {
            "type": "Artifacts",
            "inclusion" : "always"
        }
    ],
    "params": [
        {
            "name": "SERVICE_INSTANCE",
            "type": "Text",
            "required": false,
            "default_value": "(default)",
            "label_key": "SERVICE_INSTANCE_KEY",
            "desc_key": "SERVICE_INSTANCE_DESC"
        },
        {
            "name" : "APPSCAN_APP_NAME",
            "type" : "Text",
            "required" : "true",
            "default_value" : "",
            "label_key" : "APPSCAN_APP_NAME_KEY",
            "desc_key" : "APPSCAN_APP_NAME_DESC"
        }
    ],
    "outputs": [
        {
            "type": "Artifacts",
            "inclusion" : "always"
        }
    ],
    "execution": {
        "type": "JenkinsDocker",
        "shell": "#!/bin/bash
set +x
set +e
export INIT_START_TIME=$(date +\"%s\")
export TOOLCHAIN_TOKEN PIPELINE_TOOLCHAIN_ID
export SERVICE_INSTANCE=\"#SERVICE_INSTANCE#\"
export APPSCAN_APP_NAME=#APPSCAN_APP_NAME#

# OSSC line
dpkg -l | grep '^ii' > $EXT_DIR/pkglist
. $EXT_DIR/_init.sh
# OSSC line
dpkg -l | grep '^ii' > $EXT_DIR/pkglist2
if [[ $DEBUG -eq 1 ]]; then
    diff $EXT_DIR/pkglist $EXT_DIR/pkglist2
fi
INIT_END_TIME=$(date +\"%s\")
export INIT_EST_TIME=$(($INIT_END_TIME-$INIT_START_TIME))
log_and_echo \"$INFO\" \"Init runtime of `date -u -d @\"$INIT_EST_TIME\" +\'%-Mm %-Ss\'`\"
log_and_echo \"$INFO\" \"Starting test script\"

# get toolchain services
$EXT_DIR/get-service-instances.sh
if [ $? -ne 0 ]; then
    echo \"Failed to load toolchain\"
    exit 1
fi

# generate appscan environment variables from #SERVICE_INSTANCE# service instance
node $EXT_DIR/generate-appscan-vars.js >/tmp/appscan.txt
if [ ! -s /tmp/appscan.txt ]; then
    echo \"Error, no 'IBM Application Security' card available\"
    exit 1
else
. /tmp/appscan.txt
fi

# helper function to print the end time for this script
end_script_time() {
    SCRIPT_END_TIME=$(date +\"%s\")
    SCRIPT_EST_TIME=$(($SCRIPT_END_TIME-$INIT_END_TIME))
    log_and_echo \"$INFO\" \"Script runtime of `date -u -d @\"$SCRIPT_EST_TIME\" +\'%-Mm %-Ss\'`\"
}

node $EXT_DIR/set-dra-variables.js >/tmp/dra.txt
if [ -s /tmp/dra.txt ]; then
. /tmp/dra.txt
fi

appscan.sh api_login -u ${APPSCAN_USER_ID} -P ${APPSCAN_USER_TOKEN}
appscan.sh list_apps > /tmp/appscan_list_apps.txt
cat /tmp/appscan_list_apps.txt
echo \"APPSCAN_APP_NAME=>$APPSCAN_APP_NAME<\"
node $EXT_DIR/get_application_id.js /tmp/appscan_list_apps.txt \"\"$APPSCAN_APP_NAME\"\" > /tmp/application_id.txt

if [ ! -s /tmp/application_id.txt ]; then
    echo \"Error, Could not get application id for the application name $APPSCAN_APP_NAME\"
    exit 1
else
. /tmp/application_id.txt
fi

# run the python IBM Security Static Analyzer checker, dump results on output
if [ -f ${EXT_DIR}/appscan_check.py ]; then 
    if [[ $DEBUG -eq 1 ]]; then
       ${EXT_DIR}/appscan_check.py --debug
    else
       ${EXT_DIR}/appscan_check.py --debug
    fi
    RESULT=$?

    if [ \"${ARCHIVE_DIR}\" == \"${WORKSPACE}\" ]; then 
        log_and_echo \"$INFO\" \"Archive directory is the working directory\"
    else 
        log_and_echo \"$INFO\" \"Archive directory is $ARCHIVE_DIR - copying all content to that directory\"
        pushd ${WORKSPACE} &> /dev/null
        # also copy .git metadata
        if [ -d .git ]; then
            tar -cf source.tar * .git
        else
            tar -cf source.tar *
        fi
        mv source.tar ${ARCHIVE_DIR}
        cd ${ARCHIVE_DIR}
        tar -xf source.tar 
        rm source.tar 
        popd &> /dev/null
    fi

    if [ $RESULT -ne 0 ]; then
        log_and_echo \"$ERROR\" \"Error running IBM Security Static Analyzer\"
        end_script_time
        exit 1
    else
        export CURRENT_DIR=`pwd`
        cd $EXT_DIR
        # need to be in EXT_DIR to get the package.json file
        npm install
        cd $CURRENT_DIR
        node $EXT_DIR/getorg_name.js $EXT_DIR/appscan-result.json
        node $EXT_DIR/display_job_name.js $EXT_DIR/appscan-result.json > /tmp/job_id.txt
        if [ ! -s /tmp/job_id.txt ]; then
           echo \"Error, could not extract job id\"
           exit 1
        else
        . /tmp/job_id.txt
        fi
        echo -e \"${green}The job id to use for the deploy to DRA step: ${JOB_ID}${no_color}\"
        log_and_echo \"$SUCCESSFUL\" \"Application scan was successful\"
    fi
else 
    log_and_echo \"$ERROR\" \"IBM Security Static Analyzer helper script not available, failed.\"
    ${EXT_DIR}/utilities/sendMessage.sh -l good -m \"IBM Security Static Analyzer helper script not available, failed.\"
    end_script_time
    exit 1
fi

"
    }
    },
    "project": "https://github.com/othomann/appscan_static_analyzer.git",
    "project_contact": "olivier_thomann@ca.ibm.com"
}
